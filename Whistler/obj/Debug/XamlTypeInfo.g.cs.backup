//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Whistler
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Whistler.Whistler_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Whistler.Whistler_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Whistler.Whistler_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Whistler.Whistler_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[36];
            _typeNameTable[0] = "Whistler.ViewModel.ViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Whistler.ViewModel.MainCategoriesViewModel";
            _typeNameTable[3] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[4] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[5] = "Whistler.ViewModel.MainViewModel";
            _typeNameTable[6] = "Whistler.ViewModel.SettingsViewModel";
            _typeNameTable[7] = "Whistler.ViewModel.LookingForViewModel";
            _typeNameTable[8] = "Whistler.ViewModel.WhistlerListViewModel";
            _typeNameTable[9] = "Whistler.View.CategoryDetails";
            _typeNameTable[10] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[11] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[12] = "Whistler.View.CreateWhistlePage";
            _typeNameTable[13] = "String";
            _typeNameTable[14] = "Whistler.Model.AnonyousWhistleModel";
            _typeNameTable[15] = "Boolean";
            _typeNameTable[16] = "Whistler.Converter.DoubleToTwoDigitsConverter";
            _typeNameTable[17] = "Whistler.Converter.ProviderToTitle";
            _typeNameTable[18] = "Whistler.View.LookingFor";
            _typeNameTable[19] = "Whistler.View.MainCategories";
            _typeNameTable[20] = "Whistler.View.MainPage";
            _typeNameTable[21] = "Whistler.View.MorePage";
            _typeNameTable[22] = "Whistler.ViewModel.MyProfileViewModel";
            _typeNameTable[23] = "Whistler.Model.WhistleUser";
            _typeNameTable[24] = "Whistler.View.MyProfile";
            _typeNameTable[25] = "Windows.Storage.Streams.IBuffer";
            _typeNameTable[26] = "Byte[]";
            _typeNameTable[27] = "System.Array";
            _typeNameTable[28] = "Byte";
            _typeNameTable[29] = "System.ValueType";
            _typeNameTable[30] = "Whistler.View.PrivacyStatement";
            _typeNameTable[31] = "Whistler.View.ProvidingOrProvider";
            _typeNameTable[32] = "Whistler.View.SettingsPage";
            _typeNameTable[33] = "Whistler.View.SignUpPage";
            _typeNameTable[34] = "Whistler.View.WhistlerDetail";
            _typeNameTable[35] = "Whistler.View.WhistlerList";

            _typeTable = new global::System.Type[36];
            _typeTable[0] = typeof(global::Whistler.ViewModel.ViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::Whistler.ViewModel.MainCategoriesViewModel);
            _typeTable[3] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[4] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[5] = typeof(global::Whistler.ViewModel.MainViewModel);
            _typeTable[6] = typeof(global::Whistler.ViewModel.SettingsViewModel);
            _typeTable[7] = typeof(global::Whistler.ViewModel.LookingForViewModel);
            _typeTable[8] = typeof(global::Whistler.ViewModel.WhistlerListViewModel);
            _typeTable[9] = typeof(global::Whistler.View.CategoryDetails);
            _typeTable[10] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[11] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[12] = typeof(global::Whistler.View.CreateWhistlePage);
            _typeTable[13] = typeof(global::System.String);
            _typeTable[14] = typeof(global::Whistler.Model.AnonyousWhistleModel);
            _typeTable[15] = typeof(global::System.Boolean);
            _typeTable[16] = typeof(global::Whistler.Converter.DoubleToTwoDigitsConverter);
            _typeTable[17] = typeof(global::Whistler.Converter.ProviderToTitle);
            _typeTable[18] = typeof(global::Whistler.View.LookingFor);
            _typeTable[19] = typeof(global::Whistler.View.MainCategories);
            _typeTable[20] = typeof(global::Whistler.View.MainPage);
            _typeTable[21] = typeof(global::Whistler.View.MorePage);
            _typeTable[22] = typeof(global::Whistler.ViewModel.MyProfileViewModel);
            _typeTable[23] = typeof(global::Whistler.Model.WhistleUser);
            _typeTable[24] = typeof(global::Whistler.View.MyProfile);
            _typeTable[25] = typeof(global::Windows.Storage.Streams.IBuffer);
            _typeTable[26] = typeof(global::System.Byte[]);
            _typeTable[27] = typeof(global::System.Array);
            _typeTable[28] = typeof(global::System.Byte);
            _typeTable[29] = typeof(global::System.ValueType);
            _typeTable[30] = typeof(global::Whistler.View.PrivacyStatement);
            _typeTable[31] = typeof(global::Whistler.View.ProvidingOrProvider);
            _typeTable[32] = typeof(global::Whistler.View.SettingsPage);
            _typeTable[33] = typeof(global::Whistler.View.SignUpPage);
            _typeTable[34] = typeof(global::Whistler.View.WhistlerDetail);
            _typeTable[35] = typeof(global::Whistler.View.WhistlerList);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelLocator() { return new global::Whistler.ViewModel.ViewModelLocator(); }
        private object Activate_2_MainCategoriesViewModel() { return new global::Whistler.ViewModel.MainCategoriesViewModel(); }
        private object Activate_4_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_5_MainViewModel() { return new global::Whistler.ViewModel.MainViewModel(); }
        private object Activate_6_SettingsViewModel() { return new global::Whistler.ViewModel.SettingsViewModel(); }
        private object Activate_7_LookingForViewModel() { return new global::Whistler.ViewModel.LookingForViewModel(); }
        private object Activate_8_WhistlerListViewModel() { return new global::Whistler.ViewModel.WhistlerListViewModel(); }
        private object Activate_9_CategoryDetails() { return new global::Whistler.View.CategoryDetails(); }
        private object Activate_12_CreateWhistlePage() { return new global::Whistler.View.CreateWhistlePage(); }
        private object Activate_14_AnonyousWhistleModel() { return new global::Whistler.Model.AnonyousWhistleModel(); }
        private object Activate_16_DoubleToTwoDigitsConverter() { return new global::Whistler.Converter.DoubleToTwoDigitsConverter(); }
        private object Activate_17_ProviderToTitle() { return new global::Whistler.Converter.ProviderToTitle(); }
        private object Activate_18_LookingFor() { return new global::Whistler.View.LookingFor(); }
        private object Activate_19_MainCategories() { return new global::Whistler.View.MainCategories(); }
        private object Activate_20_MainPage() { return new global::Whistler.View.MainPage(); }
        private object Activate_21_MorePage() { return new global::Whistler.View.MorePage(); }
        private object Activate_22_MyProfileViewModel() { return new global::Whistler.ViewModel.MyProfileViewModel(); }
        private object Activate_24_MyProfile() { return new global::Whistler.View.MyProfile(); }
        private object Activate_30_PrivacyStatement() { return new global::Whistler.View.PrivacyStatement(); }
        private object Activate_31_ProvidingOrProvider() { return new global::Whistler.View.ProvidingOrProvider(); }
        private object Activate_32_SettingsPage() { return new global::Whistler.View.SettingsPage(); }
        private object Activate_33_SignUpPage() { return new global::Whistler.View.SignUpPage(); }
        private object Activate_34_WhistlerDetail() { return new global::Whistler.View.WhistlerDetail(); }
        private object Activate_35_WhistlerList() { return new global::Whistler.View.WhistlerList(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Whistler.Whistler_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Whistler.Whistler_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Whistler.ViewModel.ViewModelLocator
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("MainCategoriesViewModel");
                userType.AddMemberName("MainPageViewModel");
                userType.AddMemberName("SettingsViewModel");
                userType.AddMemberName("LookingForViewModel");
                userType.AddMemberName("WhistlerListViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Whistler.Whistler_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Whistler.ViewModel.MainCategoriesViewModel
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                userType.AddMemberName("IsInDesignMode");
                xamlType = userType;
                break;

            case 4:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_ObservableObject;
                xamlType = userType;
                break;

            case 5:   //  Whistler.ViewModel.MainViewModel
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Whistler.ViewModel.SettingsViewModel
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Whistler.ViewModel.LookingForViewModel
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_7_LookingForViewModel;
                userType.AddMemberName("Title");
                userType.AddMemberName("MatchingWhistles");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Whistler.ViewModel.WhistlerListViewModel
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Whistler.View.CategoryDetails
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_9_CategoryDetails;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Whistler.Whistler_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Whistler.Whistler_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Whistler.View.CreateWhistlePage
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_12_CreateWhistlePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  String
                xamlType = new global::Whistler.Whistler_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Whistler.Model.AnonyousWhistleModel
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Boolean
                xamlType = new global::Whistler.Whistler_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Whistler.Converter.DoubleToTwoDigitsConverter
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_16_DoubleToTwoDigitsConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Whistler.Converter.ProviderToTitle
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_ProviderToTitle;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Whistler.View.LookingFor
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_18_LookingFor;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Whistler.View.MainCategories
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_MainCategories;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Whistler.View.MainPage
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_MainPage;
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("CurrentPageKey");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Whistler.View.MorePage
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_MorePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Whistler.ViewModel.MyProfileViewModel
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_22_MyProfileViewModel;
                userType.AddMemberName("AppUser");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Whistler.Model.WhistleUser
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Whistler.View.MyProfile
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_MyProfile;
                userType.AddMemberName("ImageBuffer");
                userType.AddMemberName("fileBytes");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.Storage.Streams.IBuffer
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  Byte[]
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  System.Array
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 28:   //  Byte
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 29:   //  System.ValueType
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 30:   //  Whistler.View.PrivacyStatement
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_PrivacyStatement;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Whistler.View.ProvidingOrProvider
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_ProvidingOrProvider;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Whistler.View.SettingsPage
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_SettingsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Whistler.View.SignUpPage
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_SignUpPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  Whistler.View.WhistlerDetail
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_WhistlerDetail;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Whistler.View.WhistlerList
                userType = new global::Whistler.Whistler_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_WhistlerList;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_ViewModelLocator_MainCategoriesViewModel(object instance)
        {
            var that = (global::Whistler.ViewModel.ViewModelLocator)instance;
            return that.MainCategoriesViewModel;
        }
        private object get_1_ViewModelLocator_MainPageViewModel(object instance)
        {
            var that = (global::Whistler.ViewModel.ViewModelLocator)instance;
            return that.MainPageViewModel;
        }
        private object get_2_ViewModelLocator_SettingsViewModel(object instance)
        {
            var that = (global::Whistler.ViewModel.ViewModelLocator)instance;
            return that.SettingsViewModel;
        }
        private object get_3_ViewModelLocator_LookingForViewModel(object instance)
        {
            var that = (global::Whistler.ViewModel.ViewModelLocator)instance;
            return that.LookingForViewModel;
        }
        private object get_4_ViewModelLocator_WhistlerListViewModel(object instance)
        {
            var that = (global::Whistler.ViewModel.ViewModelLocator)instance;
            return that.WhistlerListViewModel;
        }
        private object get_5_CategoryDetails_ViewModel(object instance)
        {
            var that = (global::Whistler.View.CategoryDetails)instance;
            return that.ViewModel;
        }
        private object get_6_LookingForViewModel_Title(object instance)
        {
            var that = (global::Whistler.ViewModel.LookingForViewModel)instance;
            return that.Title;
        }
        private void set_6_LookingForViewModel_Title(object instance, object Value)
        {
            var that = (global::Whistler.ViewModel.LookingForViewModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_7_LookingForViewModel_MatchingWhistles(object instance)
        {
            var that = (global::Whistler.ViewModel.LookingForViewModel)instance;
            return that.MatchingWhistles;
        }
        private void set_7_LookingForViewModel_MatchingWhistles(object instance, object Value)
        {
            var that = (global::Whistler.ViewModel.LookingForViewModel)instance;
            that.MatchingWhistles = (global::Whistler.Model.AnonyousWhistleModel)Value;
        }
        private object get_8_ViewModelBase_IsInDesignMode(object instance)
        {
            var that = (global::GalaSoft.MvvmLight.ViewModelBase)instance;
            return that.IsInDesignMode;
        }
        private object get_9_LookingFor_ViewModel(object instance)
        {
            var that = (global::Whistler.View.LookingFor)instance;
            return that.ViewModel;
        }
        private object get_10_MainCategories_ViewModel(object instance)
        {
            var that = (global::Whistler.View.MainCategories)instance;
            return that.ViewModel;
        }
        private object get_11_MainPage_ViewModel(object instance)
        {
            var that = (global::Whistler.View.MainPage)instance;
            return that.ViewModel;
        }
        private object get_12_MainPage_CurrentPageKey(object instance)
        {
            var that = (global::Whistler.View.MainPage)instance;
            return that.CurrentPageKey;
        }
        private object get_13_MyProfileViewModel_AppUser(object instance)
        {
            var that = (global::Whistler.ViewModel.MyProfileViewModel)instance;
            return that.AppUser;
        }
        private void set_13_MyProfileViewModel_AppUser(object instance, object Value)
        {
            var that = (global::Whistler.ViewModel.MyProfileViewModel)instance;
            that.AppUser = (global::Whistler.Model.WhistleUser)Value;
        }
        private object get_14_MyProfile_ImageBuffer(object instance)
        {
            var that = (global::Whistler.View.MyProfile)instance;
            return that.ImageBuffer;
        }
        private void set_14_MyProfile_ImageBuffer(object instance, object Value)
        {
            var that = (global::Whistler.View.MyProfile)instance;
            that.ImageBuffer = (global::Windows.Storage.Streams.IBuffer)Value;
        }
        private object get_15_MyProfile_fileBytes(object instance)
        {
            var that = (global::Whistler.View.MyProfile)instance;
            return that.fileBytes;
        }
        private void set_15_MyProfile_fileBytes(object instance, object Value)
        {
            var that = (global::Whistler.View.MyProfile)instance;
            that.fileBytes = (global::System.Byte[])Value;
        }
        private object get_16_ProvidingOrProvider_ViewModel(object instance)
        {
            var that = (global::Whistler.View.ProvidingOrProvider)instance;
            return that.ViewModel;
        }
        private object get_17_WhistlerList_ViewModel(object instance)
        {
            var that = (global::Whistler.View.WhistlerList)instance;
            return that.ViewModel;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Whistler.Whistler_XamlTypeInfo.XamlMember xamlMember = null;
            global::Whistler.Whistler_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Whistler.ViewModel.ViewModelLocator.MainCategoriesViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.ViewModel.ViewModelLocator");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "MainCategoriesViewModel", "Whistler.ViewModel.MainCategoriesViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_MainCategoriesViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.ViewModel.ViewModelLocator.MainPageViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.ViewModel.ViewModelLocator");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "MainPageViewModel", "Whistler.ViewModel.MainViewModel");
                xamlMember.Getter = get_1_ViewModelLocator_MainPageViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.ViewModel.ViewModelLocator.SettingsViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.ViewModel.ViewModelLocator");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "SettingsViewModel", "Whistler.ViewModel.SettingsViewModel");
                xamlMember.Getter = get_2_ViewModelLocator_SettingsViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.ViewModel.ViewModelLocator.LookingForViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.ViewModel.ViewModelLocator");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "LookingForViewModel", "Whistler.ViewModel.LookingForViewModel");
                xamlMember.Getter = get_3_ViewModelLocator_LookingForViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.ViewModel.ViewModelLocator.WhistlerListViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.ViewModel.ViewModelLocator");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "WhistlerListViewModel", "Whistler.ViewModel.WhistlerListViewModel");
                xamlMember.Getter = get_4_ViewModelLocator_WhistlerListViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.View.CategoryDetails.ViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.View.CategoryDetails");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "ViewModel", "Whistler.ViewModel.MainCategoriesViewModel");
                xamlMember.Getter = get_5_CategoryDetails_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.ViewModel.LookingForViewModel.Title":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.ViewModel.LookingForViewModel");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_6_LookingForViewModel_Title;
                xamlMember.Setter = set_6_LookingForViewModel_Title;
                break;
            case "Whistler.ViewModel.LookingForViewModel.MatchingWhistles":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.ViewModel.LookingForViewModel");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "MatchingWhistles", "Whistler.Model.AnonyousWhistleModel");
                xamlMember.Getter = get_7_LookingForViewModel_MatchingWhistles;
                xamlMember.Setter = set_7_LookingForViewModel_MatchingWhistles;
                break;
            case "GalaSoft.MvvmLight.ViewModelBase.IsInDesignMode":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "IsInDesignMode", "Boolean");
                xamlMember.Getter = get_8_ViewModelBase_IsInDesignMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.View.LookingFor.ViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.View.LookingFor");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "ViewModel", "Whistler.ViewModel.LookingForViewModel");
                xamlMember.Getter = get_9_LookingFor_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.View.MainCategories.ViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.View.MainCategories");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "ViewModel", "Whistler.ViewModel.MainCategoriesViewModel");
                xamlMember.Getter = get_10_MainCategories_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.View.MainPage.ViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.View.MainPage");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "ViewModel", "Whistler.ViewModel.MainViewModel");
                xamlMember.Getter = get_11_MainPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.View.MainPage.CurrentPageKey":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.View.MainPage");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "CurrentPageKey", "String");
                xamlMember.Getter = get_12_MainPage_CurrentPageKey;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.ViewModel.MyProfileViewModel.AppUser":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.ViewModel.MyProfileViewModel");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "AppUser", "Whistler.Model.WhistleUser");
                xamlMember.Getter = get_13_MyProfileViewModel_AppUser;
                xamlMember.Setter = set_13_MyProfileViewModel_AppUser;
                break;
            case "Whistler.View.MyProfile.ImageBuffer":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.View.MyProfile");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "ImageBuffer", "Windows.Storage.Streams.IBuffer");
                xamlMember.Getter = get_14_MyProfile_ImageBuffer;
                xamlMember.Setter = set_14_MyProfile_ImageBuffer;
                break;
            case "Whistler.View.MyProfile.fileBytes":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.View.MyProfile");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "fileBytes", "Byte[]");
                xamlMember.Getter = get_15_MyProfile_fileBytes;
                xamlMember.Setter = set_15_MyProfile_fileBytes;
                break;
            case "Whistler.View.ProvidingOrProvider.ViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.View.ProvidingOrProvider");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "ViewModel", "Whistler.ViewModel.MainCategoriesViewModel");
                xamlMember.Getter = get_16_ProvidingOrProvider_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Whistler.View.WhistlerList.ViewModel":
                userType = (global::Whistler.Whistler_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Whistler.View.WhistlerList");
                xamlMember = new global::Whistler.Whistler_XamlTypeInfo.XamlMember(this, "ViewModel", "Whistler.ViewModel.WhistlerListViewModel");
                xamlMember.Getter = get_17_WhistlerList_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Whistler.Whistler_XamlTypeInfo.XamlSystemBaseType
    {
        global::Whistler.Whistler_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Whistler.Whistler_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Whistler.Whistler_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Whistler.Whistler_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


